Tables

Name			File Address		Memory Address		Entry Length
Levels			0x28000				0x058000					3
Levels (RAM)	0x28000				0x7e3193					3
Behaviors		0x2840				0x00a840					4
Models			0x264b				0x00a64b					2
Palettes		0x18000											2
Lighting		0x19000											1
Animated		0x18000											
Strings			0x00e796			0x01e796					*
Functions		0x01ad5d			0x03ad5d					*
??				0x01aede			0x03aede					14
??				0x01b000			0x03b000					*
??				0x0300d5			0x0680d5					8

Palettes
	Entry[256]			2
		Type					1
		Value					1

LightingEntry
	Type					1		(0x00 - 0x09)
	Color				1

DynamicEntry
	Type					1		(0x3E)
	Palette				1		(0-19)

StippleEntry
	Type					1		(0x3F)
	Colors				1
		Color1				4 bits
		Color2				4 bits

TextureEntry
	Type					1		(0x40 - 32x32 Texture Flipped, 0x41 - 64x64 Texture Flipped, 0x42 - 8x8 Texture Flipped, 0x43 - 64x16 Texture Flipped, 0x44 - 32x8 Texture Flipped, 0x45 - 32x8 Texture, 0x46 - 64x64 Texture, 0x47 - 16x8 Texture, 0x48 - 32x32 Texture, 0x49 - 64x64 Texture Polar Flipped, 0x4a - 64x64 Texture Polar)
	Texture				1
		Page					1 bit
		Texture				7 bits

AnimatedEntry
	Animated			1 bit
	Reserved			3 bits
	DataOffset			12 bits			(Starts on Page 4 / 0x18000)

AnimatedData
	FrameCount				1
	Entry[FrameCount]		2
		Type							1
		Value							1


Audio Clips

SPC Transfer Block
	Length			2
	Destination		2
	Data[Length]

104 Title Demonstration
	Directory	0xc28c6

105 Title Screen
	Directory	0xdb5c2

106 Controls
	Directory	0xc28c6

107 Course Map Select
	Directory	0xc28c6

108 Emergency Call
	Directory	0xd1282
	00	Emergency	0xd12b6
	01	Prepare For Launch			0xd2add
	03	??							0xd4f1c
	06	??							0xc512c, 0xd6995
	08	??							0xd7727
	09	Incoming Enemy Fighters		0xd791f

	c3a64
	c3fc5
	c4589
	c512c
	c5ebe
	c6d31
	c7547
	c775a
	c7f0d
	c877d
	c8fc9
	c9ad3
	c9d42
	cd4aa
	cebe7
	cffca
	d1282
	d12b6
	d2add
	d4f1c
	d6995
	d7727
	d791f
	da6ba
	dc3fb
	dcef3
	e1bec
	e2b76
	e3974
	e5c8a
	e6f35
	e7b25
	e958d
	ea73b


109 Corneria
	Directory	0xc28c6


Images

Tiles
	8x8 Pixels

Pictures
	4x5 Tiles (Columns First)

0xbb9c0 Communication
0xbbc40 Communication 2
0xbbec0 Communication 3
0xbc140 Communication 4
0xbc3c0 Communication 5
0xbc640 Fox
0xbc8c0 Fox 2
0xbcb40 Peppy
0xbcdc0 Peppy 2
0xbd040 Falco
0xbd2c0 Falco 2
0xbd540 Slippy
0xbd7c0 Slippy 2
0xbda40 Pepper
0xbdcc0 Pepper 2
0xbdf40 Andross
0xbe1c0 Andross 2
0xbe440 Communication 6


Routines

// Reset
0x00ff96_Reset()
{
	Jump	 0x1fbdb1_Start()
}

0x1fbdb1_Start()
{
	// Disable Interrupts
	// Disable Emulation Mode
	// 16-Bit Registers
	// Page 0
	// Stack = 0x02ff
	// 8-Bit Registers
	// Bank = 0
	Call 0x01fbed4_InitializeHardwareRegisters
	Call 0x01fbe41_InitializeMemory
	// Stack = 0x02ff
	Call 0x02e260_InitializeRam()
	Call 0x1ff586
	Call 0x1ff4c7
	[0x7ea05a] = 0x00
	[0x1fe1] = 0x00

	Jump 0x1fbe35

	...
0x1fbe35:
	Call 0x1ff9cd
	Call 0x02e260_InitializeRam()
	Jump 0x03bdcb_Loop
}

0x1ff9cd()
{
	// Music?
	Call 0x03ad73

	Call 0x02f8d1(0x80)

	[0x16dd] = 0xc8
	Call 0x03bd79_WaitForVSYNC()

	[0x16dd] = 0xbe
	Call 0x03bd79_WaitForVSYNC()

	[0x07ef0b0] = 0x01
	[0x1ff6] = 0x0d
	[0x16ff] = 0x7a3c
	Call 0x02e2c6()
	Call 0x03e87a()

	[0x700090] = 0x0000
	[0x700064] = 0x001f
	[0x700062] = 0xB999
	[0x188c] = 0x6800
	[0x188e] = 0x1000

	Call 0x03ab2b()
	Call 0x7e33ba()
	[0x4301] = 0x22
	[0x2121] = 0x80
	[0x4302] = 0x0540
	[0x4304] = 0x7f
	[0x4305] = 0x0100
	[0x4300] = 0x00
	[0x420b] = 0x01
	[0x7e45ed] = 0x41
	[0x7e45ff] = 0x43
	[0x7e45f1] = 0x3a
	[0x70021c] = 0x0000
	[0x700034] = 0x0040
	[0x700036] = 0x0030
	[0x1f0f] = 0x01
	[0x15bd] = 0x00
	[0x15be] = 0x00
	if([0x1fe1] != 0)
	{
		Jump 0x1ffaf9
	}
0x1ffaa2:
	...
0x1ffaab:
	...
0x1ffaf9:
	// A = [4211]
	Call 0x02fd76()
	Call 0x1ffc61()
	Call 0x1ffdb6()
	Call 0x1ffe0a()
	[0x14d8] |= 0x60
	if(([0x120a] & 0x20) != 0)
	{
		[0x7ea05a] ^= 0x01;
		// A = 0x11
		Call 0x03b7e5()
	}
0x1ffb2e:
	if([0x7ea05a] != 0x00 &&
		([0x120a] & 0x08) != 0)
	{
		[0x7ea05a] = 0x00
		// A = 0x11
		Call 0x03b7e5()
	}
0x1ffb47:
	if([0x7ea05a] == 0x00 &&
		([0x120a] & 0x04) != 0)
	{
		[0x7ea05a] = 0x01
		// A = 0x11
		Call 0x03b7e5()
	}
0x1ffb60:
	if(([0x1209] & 0x40) != 0)
	{
		Jump 0x1ffaab
	}
0x1ffb6a:
	if(([0x120a] & 0x40) != 0)
	{
		Jump 0x1ffaab
	}
0x1ffb74:
	if(([0x1209] & 0x80) == 0 &&
		([0x120a] & 0x80) == 0 &&
		([0x120a] & 0x10) == 0)
	{
		Jump 0x1ffb00
	}
0x1ffb8c:
	// A = 0x10
	Call 0x03b7e5();
	[0x1f49] = 0xf1
	[0x1f48] = 0x00
	[0x18b4] = 0xff
	Call 0x02fd76();
	Call 0x1ffc61();
	Call 0x1ffdb6();
	if(([0x18b4] & 0xff) == 0x00)
	{
		[0x1f0f] = 0x00
		if([0x7ea05a] != 0x00)
		{
			Jump 0x1ffc5f
		}
0x1ffbbe:
		Call 0x02e260
		[0x1ff6] = 0x0d
		[0x16ff] = 0x6e9a
		Call 0x02e2c6
		[0x16ee] = 0x01
		[0x15bd] = 0x00
		[0x15be] = 0x00
		Call 0x02fd76
		Call 0x02d950
		Call 0x03e9ea
		if([0x15bd] < 0x0014)
		{
			if([0x1fd4] == 0x0a)
				Jump 0x1ffc47
			if(([0x14d3] & 0x08) == 0)
				Jump 0x1ffc0f
			if(([0x14d9] & 0x80) == 0 &&
				[0x120a] & 0x10 != 0x00)
			{
				[0x1f49] = 0xf1
				[0x1f48] = 0x00
				[0x18b4] = 0xff
				while(true)
				{
					Call 0x02fd76()
					Call 0x02d950()
					if(([0x18b4] & 0xff) == 0x00)
						break
				}
0x1ffc36:
				Call 0x02e260()
				[0x7ea05a] = 0x01
				[0x1fe1] = 0x01
				Jump 0x1ffc58
			}
		}
0x1ffbe2:
	}
0x1ffb9f:
}

0x03bdcb_Loop()
{
	while(true)
	{
		0x03d108();
		0x03ccf5();
		0x03c4fd();
		0x03ca67();
		0x03c708();
		0x03c87d();
		0x03c708();
		0x03c87d();
		0x03cb21();
		0x03cc2a();
		0x03bd79_WaitForVSYNC();
		0x03bd79_WaitForVSYNC();
		0x03ad89();
		0x03bd79_WaitForVSYNC();
		0x03bd66();
		0x03c66b();
		0x03c4fd();
		0x03c57b();
		0x03ca67();
		0x03c779();
		0x03c87d();
		0x03c470();
		0x03bd66();
		0x03cc2a();
		0x03c4fd();
		0x03c57b();
		0x03ca67();
		0x03c779();
		0x03c87d();
		0x03cbe7();
		0x03e1f0();
		0x03b7e5();
		0x03bd66();
		0x03bd79_WaitForVSYNC();
		0x03c5fd();
		0x03bd66();
		0x03bd66();
		0x03cb3b();
		0x03c739();
		0x03bd66();
		0x03c5ab();
		0x03c942();
		0x03c779();
		0x03c882();
		0x03c5ac();
		0x03c8b7();
		0x03bd66();
		0x03bd79_WaitForVSYNC();
		0x03bd79_WaitForVSYNC();
		0x03ab2b();
		0x03bd79_WaitForVSYNC();
		0x7e33ba();
		0x03ab7e();
		0x03bd79_WaitForVSYNC();
		0x7e33ba();
		0x03bd79_WaitForVSYNC();
		0x03c763();
		0x03c74f();
		while()
		{
			0x03c739();
			0x03ca08();
			0x03c867();
		}
		0x03bd79_WaitForVSYNC();
		while()
		{
			0x03c763();
			0x03d1a7();
			0x03c74f();
			0x03b7e5();
		}
		0x03c763();
		0x03d1a7();
		0x03d11f();
		0x03c74f();
		if()
			0x03b7e5();
		0x03cbd4();
		0x03bd79_WaitForVSYNC();

		0x03b7e5();
		0x03bd79_WaitForVSYNC();
		0x03bd79_WaitForVSYNC();
		0x03bd79_WaitForVSYNC();
		0x03bd79_WaitForVSYNC();
		0x03bd79_WaitForVSYNC();
		0x03bd79_WaitForVSYNC();
		0x03d108();
		0x03bd66();
		0x02e2c6();
		if()
			0x02ef97();
		0x02fd76();
		0x1fbdb0();
		0x02d950();
		0x03e9ea();
		0x06bbda();
		0x03aec8();
		0x03a963();
		0x7e4ee3();
		0x02f0a5();
		0x02fd76();
		0x02d950();
		0x02f061();
		0x02fd76();
		0x02d950();
		0x02f061();
		0x02fd76();
		0x02d950();
		0x03e3c7();
	}
}

0x1ff586
{
	Call 0x03ad5d
	// Wait For 0x10000 cycles
	Call 0x03aea7

	[0x1ff6] = 0x0d
	[0x16ff] = 0x7870
	
	Call 0x02e2c6
}

0x02e2c6()
{
	[0x420c] = 0x00

	Call 0x02f8d1(0x80)

	[0x2100] = 0x80
	[0x18b4] = 0x00
	[0x18b5] = 0x00
	[0x16dd] = 0x6e
	Call 0x03bd79_WaitForVSYNC()
	[0x16dd] = 0x64
	Call 0x03bd79_WaitForVSYNC()
	[0x1fd4] = 0x0000
	[0x16ad] = 0x0000
	[0x16fd] = 0x0000
	[0x1701] = 0x0000
	[0x1703] = 0x0000
	[0xc5] = 0x0000;
	[0x70021c] = 0x0001
	[0x1fd4] = 0x0000
	[0x1201] = 0x0000
	[0x1f51] = 0x0000
	[0x1f4f] = 0x0000
	[0x1f53] = 0x0000
	[0x15ae] = 0x01
	[0x1958] = 0x00
	[0x189f] = 0x00
	[0x18a0] = 0x00
	[0x1f16] = 0x00
	[0x1fcf] = 0x00
	[0x1fd0] = 0x00
	[0x14c3] = 0x00
	[0x1fd1] = 0x00
	[0x1f54] = 0x00
	[0x1f53] = 0x00
	[0x1fe0] = 0x00

	Call 0x02f4bb
	Call 0x0af92e

	// Push [0x1ff6]
	[0x1ff6] = [0x058002]
	// Push [0x16ff]
	Call 0x03ed65([0x058000])
	Call 0x068004
	//Pull [0x1ff6]
	[0x1fd4] = 0x0000
	//Pulll [0x16ff]
	Call 0x03ed65
	Call 0x02e394
	Call 0x02db21
}

0x02f8d1(A)
{
	[0x7e45ee] = A
	[0x7e45f0] = A
	[0x7e45f2] = A
}

0x03ad5d
{
	Call 0x03b0f5(0x0000)
}

0x03ad68
{
	Call 0x03b0f5(0x001c)
}

0x03ad73
{
	Call 0x03b0f5(0x0025)
}

0x03ad7e
{
	Call 0x03b0f5(0x0033)
}

0x03ad89
{
	Call 0x03b0f5(0x0041)
}

0x03ad94
{
	Call 0x03b0f5(0x0061)
}

0x03ad9f
{
	Call 0x03b0f5(0x0074)
}

0x03adaa
{
	Call 0x03b0f5(0x008c)
}

0x03adb5
{
	Call 0x03b0f5(0x009a)
}

0x03adc0
{
	Call 0x03b0f5(0x00a8)
}

0x03adcb
{
	Call 0x03b0f5(0x00b6)
}

0x03add6
{
	Call 0x03b0f5(0x00ce)
}

0x03ade1
{
	Call 0x03b0f5(0x00dc)
}

0x03adec
{
	Call 0x03b0f5(0x00ef)
}

0x03adf7
{
	Call 0x03b0f5(0x0102)
}

0x03ae02
{
	Call 0x03b0f5(0x0110)
}

0x03ae0d
{
	Call 0x03b0f5(0x011e)
}

0x03ae18
{
	Call 0x03b0f5(0x0136)
}

0x03ae23
{
	Call 0x03b0f5(0x0144)
}

0x03ae2e
{
	Call 0x03b0f5(0x0152)
}

0x03ae39
{
	Call 0x03b0f5(0x0165)
}

0x03ae44
{
	Call 0x03b0f5(0x0178)
}

0x03ae4f
{
	Call 0x03b0f5(0x0186)
}

0x03ae5a
{
	Call 0x03b0f5(0x0194)
}

0x03ae65
{
	Call 0x03b0f5(0x01ac)
}

0x03ae70
{
	Call 0x03b0f5(0x01ba)
}

0x03ae7b
{
	Call 0x03b0f5(0x01cd)
}

0x03ae86
{
	Call 0x03b0f5(0x01db)
}

0x03ae91
{
	Call 0x03b0f5(0x004f)
}

0x03ae9c
{
	Call 0x03b0f5(0x0058)
}

0x03aea7
{
	Call 0x03b0f5(0x0009)
}

0x03aeb2
{
	Call 0x03b0f5(0x01ee)
}

0x03aebd
{
	Call 0x03b0f5(0x01f7)
}

0x03aec8
{
	Call 0x03b0f5(0x0200)
}

0x03aed3
{
	Call 0x03b0f5(0x0209)
}

0x03b0f5(X)
{
	[0x1f49] = [0x03aede+X]
	[0x1f65] = X+1
	if([0x1f67] == 0x00)
		[0x2140] == 0xff
	[0x1f67] = 0x01
	while([0x2140 != 0xbbaa)
		;
	Jump 0x3b1a3
0x03b128:
	...
	
0x03b164:
	// A = [[0xFA] + Y]	(16-bit)
	// if(A != 0)
	{
		// Y++
		// if(Y != 0)
		{
			Jump 0x1fbdee
		}
0x03b171:
		// Y++
		// if(Y != 0)
		{
			Jump 0x1fbdee
		}
0x03b178:
		// X = A
		// A = [[0xFA] + Y]	(16-bit)
		// Y++
		// if(Y != 0)
		{
			Jump 0x1fbdee
		}
0x03b182:
		// Y++
		// if(Y != 0)
		{
			Jump 0x1fbdee
		}
0x03b189:
		// [0x2142] = A
		[0x2141] = 0x00
		[0x2140] = ?? // Stack

	}
	
0x03b1a3:
	[0x1f41] = [03aede + [1f65]] (16-bit)
	[0x1f43] = [03aee1 + [1f65]] (16-bit)
	[0xfc] = [03aee0 + [1f65]] (8-bit)
	[0x1f65] += 5;
	[0xfa] = 0x00
	while([0x1f41] != 0)
	{
		// Y = A
		// A += [1f43]
		// if(A >= 0)
		{
			Jump 0x03b164
		}
	}
	[0x2142] = 0x0400
	[0x2140] = 0x00cc;
	while([0x2140] != 0x00)
		;
	[0x2141] = 0x00
	[0x2142] = 0x00
	[0x2143] = 0x00
	[0x1f48] = 0x00

	// return [0x4211]
}

0x1ff4c7
{
}

0x02e260_InitializeRam()
{
	[0x18a1] = 0x28;
	[0x18a4] = 0x28;
	[0x18a2] = 0x28;
	[0x18a3] = 0x28;
	[0x18a5] = 0x28;
	[0x18a6] = 0x28;

	Call 0x0bd2ef;
	Call 0x03bd9b;

	[0x1f6b] = 0x0000;
	[0x1fbd] = 0x0000;
	[0x173e] = 0x0000;
	[0x700062] = 0xf21c
	[0x70002c] = 0x1000
	[0x700090] = 0x0000
	[0x700064] = 0x00

	Call 0x7e4ee3(0x01, 0xb301)

	// Copy Memory from 0x701000 to 0x7f0000 (0x2000 bytes)
}

0x0bd2ef
{
	[0x15af] = 0x0003
	[0x14d8] = 0x00
	[0x14d9] = 0x00
	[0x14da] = 0x00
	[0x16cf] = 0x00
	[0x15a2] = 0x00
	
	Call 0x06818d
}

0x03bd9b
{
	[0x16ee] = 0x03
	[0x189a] = 0x00
	[0x16d0] = 0x00fc
	[0x16d2] = 0x0092
	[0x16d4] = 0x0018
	[0x16d6] = 0x019a
	[0x16d8] = 0x0000
	[0x16df] = 0x0000
	[0x16e1] = 0x0000
}

0x068191
{
	// Copy Memory from 0x0680d5 Plus (Accumulator << 3) to 7e3186 (8 bytes)
}

0x03abfe
{

}

0x01fbed4_InitializeHardwareRegisters()
{
	// Wait for VSYNC
	[0x16dd] = 0x01
	Call 0x03bd79_WaitForVSYNC
	[0x16dd] = 0x00
	Call 0x03bd79_WaitForVSYNC

	[0x2100] = 0x8f
	[0x2101] = 0x00
	[0x2102] = 0x00
	[0x2103] = 0x00
	[0x2105] = 0x00
	[0x2106] = 0x00
	[0x2107] = 0x00
	[0x2108] = 0x00
	[0x2109] = 0x00
	[0x210a] = 0x00
	[0x210b] = 0x00
	[0x210c] = 0x00
	[0x210d] = 0x00
	[0x210d] = 0x00
	[0x210e] = 0x00
	[0x210e] = 0x00
	[0x210f] = 0x00
	[0x210f] = 0x00
	[0x2110] = 0x00
	[0x2111] = 0x00
	[0x2112] = 0x00
	[0x2112] = 0x00
	[0x2113] = 0x00
	[0x2113] = 0x00
	[0x2114] = 0x00
	[0x2114] = 0x00
	[0x2115] = 0x80
	[0x2116] = 0x00
	[0x2117] = 0x00
	[0x211a] = 0x00
	[0x211b] = 0x00
	[0x211b] = 0x01
	[0x211c] = 0x00
	[0x211c] = 0x00
	[0x211d] = 0x00
	[0x211d] = 0x00
	[0x211e] = 0x00
	[0x211e] = 0x01
	[0x211f] = 0x00
	[0x211f] = 0x00
	[0x2120] = 0x00
	[0x2120] = 0x00
	[0x2121] = 0x00
	[0x2122] = 0x00
	[0x2123] = 0x00
	[0x2124] = 0x00
	[0x2125] = 0x00
	[0x2126] = 0x00
	[0x2127] = 0x00
	[0x2128] = 0x00
	[0x2129] = 0x00
	[0x212a] = 0x00
	[0x212b] = 0x00
	[0x212c] = 0x00
	[0x212d] = 0x00
	[0x212e] = 0x00
	[0x2130] = 0x30
	[0x2131] = 0x00
	[0x2132] = 0xe0
	[0x2133] = 0x00
	[0x4200] = 0x00
	[0x4201] = 0xff
	[0x4202] = 0x00
	[0x4203] = 0x00
	[0x4204] = 0x00
	[0x4205] = 0x00
	[0x4206] = 0x00
	[0x4207] = 0x00
	[0x4208] = 0x00
	[0x4209] = 0x00
	[0x420a] = 0x00
	[0x420b] = 0x00
	[0x420c] = 0x00
	[0x420d] = 0x00
}

0x1fbe41_InitializeMemory()
{
	// Zero Memory 0x7e2000 - 0x7fffff
	// Zero Memory 0x700000 - 0x70ffff
	// Zero Memory 0x000300 - 0x001fff
	// Zero Memory 0x000000 - 0x0000fe
	Call 0x1fdc85_CopyRomToRam()
	[0x16f8] = ([0x213f] & 0x10)
}

0x1fdc85_CopyRomToRam()
{
	// Copy Memory 0x1fdca8 to 0x000101 (0x60 bytes)
	// Copy Memory 0x028000 to 0x7e3193 (0x59c1 bytes)
}

0x03bd79_WaitForVSYNC()
{
	// 16-Bit Registers
	[0x16de] = 0x00
	while([0x16dd] != [0x213d])
		;
	return
}

0x01fbed4_InitializeHardwareRegisters()
	Calls
		0x03BD79
	Writes
		0x16DD
		0x2100
		0x2101
		0x2102
		0x2103
		0x2105
		0x2106
		0x2107
		0x2108
		0x2109
		0x210A
		0x210B
		0x210C
		0x210D
		0x210E
		0x210F
		0x2110
		0x2111
		0x2112
		0x2113
		0x2114
		0x2115
		0x2116
		0x2117
		0x211A
		0x211B
		0x211C
		0x211D
		0x211E
		0x211F
		0x2120
		0x2121
		0x2122
		0x2123
		0x2124
		0x2125
		0x2126
		0x2127
		0x2128
		0x2129
		0x212A
		0x212B
		0x212C
		0x212D
		0x212E
		0x2130
		0x2131
		0x2132
		0x2133
		0x4200
		0x4201
		0x4202
		0x4203
		0x4204
		0x4205
		0x4206
		0x4207
		0x4208
		0x4209
		0x420A
		0x420B
		0x420C
		0x420D

0x03bd79_WaitForVSYNC()
	Reads
		0x16DD
		0x2137
		0x213D
	Writes
		16DE

0x03bdcb()
	Calls
		0x03AB2B
		0x03AB7E
		0x03AD89
		0x03B7E5
		0x03BD66
		0x03BD79
		0x03C470
		0x03C4FD
		0x03C57B
		0x03C5AB
		0x03C5AC
		0x03C5C0
		0x03C5FD
		0x03C66B
		0x03C708
		0x03C739
		0x03C74F
		0x03C763
		0x03C779
		0x03C867
		0x03C87D
		0x03C882
		0x03C8B7
		0x03C942
		0x03CA08
		0x03CA67
		0x03CB21
		0x03CB3B
		0x03CBE7
		0x03CC2A
		0x03CCF5
		0x03D108
		0x03E1F0
		0x7E33BA
	Reads
		0x02
		0x10
		0x11
		0x12
		0x13
		0x18
		0x1A
		0x45
		0x1209
		0x16D8
		0x16DB
		0x2137
		0x213C
		0x004211
		0xA08B+X
		0x03D365+X
		0x03D3DC+X
		0x03D660+X
		0x700022
		0x7001D6
		0x7001DA
		0x7001F2
	Writes
		0x00
		0x02
		0x04
		0x10
		0x12
		0x14
		0x16
		0x1C
		0x1E
		0x20
		0x30
		0x32
		0x34
		0x36
		0x38
		0x15C4
		0x16D8
		0x16DB
		0x16DD
		0x16E6
		0x16E8
		0x16EA
		0x188C
		0x188E
		0x1F48
		0x1F49
		0x1F4F
		0x1F51
		0x1F53
		0x1FD1
		0x2107
		0x210D
		0x210E
		0x2116
		0x2118
		0x212C
		0x2130
		0x2131
		0x2132
		0x3038
		0x4209
		0x420C
		0x700022
		0x700030
		0x700062
		0x700064
		0x700090
		0x70009A
		0x7001D6
		0x7001D8
		0x7001DA
		0x7001F2
		0x7E4602
		0x7E4604
		0x7E4606
		0x7EF0B8